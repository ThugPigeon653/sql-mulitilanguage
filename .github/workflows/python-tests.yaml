name: Python Tests

on:
  push:
    branches:
      - '*'
      - '!main'
jobs:
  tsql-test:
    runs-on: ubuntu-latest

    steps:
      - name: Run ms-sql container
        run: |
          docker run -e 'ACCEPT_EULA=Y' -e 'MSSQL_SA_PASSWORD=StrongPword8' -p 1433:1433 -d mcr.microsoft.com/mssql/server:2022-latest

      - name: Checkout source
        uses: actions/checkout@v2

      - name: Setup py installation
        uses: actions/setup-python@v2
        with: 
          python-version: 3.x
      
      - name: Install ODBC Driver for SQL Server
        run: sudo apt-get install -y unixodbc-dev

      - name: Wait
        run: sleep 20

      - name: Set Environment Variables (TSQL)
        run: |
          echo "SQL_SERVER=localhost" >> $GITHUB_ENV
          echo "SQL_DATABASE=master" >> $GITHUB_ENV
          echo "SQL_UID=sa" >> $GITHUB_ENV
          echo "SQL_PWD=StrongPword8" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyodbc

      - name: TSQL Tests
        run: python -m unittest test/test_tsql.py

      - name: Stop ms-sql container
        run: |
          CONTAINER_ID=$(docker ps -q --filter ancestor=mcr.microsoft.com/mssql/server:2022-latest)
          if [ ! -z "$CONTAINER_ID" ]; then
            docker stop $CONTAINER_ID
          fi

  plsql-test:
    runs-on: ubuntu-latest
    steps:
      - name: Set Environment Variables (Oracle)
        run: |
          echo "ORACLE_SERVER=localhost" >> $GITHUB_ENV
          echo "ORACLE_SERVICE_NAME=ORCLCDB" >> $GITHUB_ENV
          echo "ORACLE_USER=SYS" >> $GITHUB_ENV
          echo "ORACLE_PASSWORD=StrongPword8" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/opt/oracle/instantclient_21_1:$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Setup py installation
        uses: actions/setup-python@v2
        with: 
          python-version: 3.x

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cx_Oracle
      
      - name: Install oracle client
        run: |
          cd /opt/
          sudo mkdir /opt/oracle
          cd oracle
          sudo wget https://download.oracle.com/otn_software/linux/instantclient/211000/instantclient-basic-linux.x64-21.1.0.0.0.zip
          sudo unzip instantclient-basic-linux.x64-21.1.0.0.0.zip
          sudo apt update
          sudo apt install libaio1
          sudo sh -c "echo /opt/oracle/instantclient_21_1 > /etc/ld.so.conf.d/oracle-instantclient.conf"
          sudo ldconfig

# BUG-001 Debugging required for connection to oracle db. To save build time while out of service,
# this image pull/run has been removed.
#      - name: Run oracle container
#        run: |
#          docker pull oracledb19c/oracle.19.3.0-ee:oracle19.3.0-ee
#          docker run --name oracle-server -p 1521:1521 -p 5500:5500 -v /opt/oracle/oradata -d oracledb19c/oracle.19.3.0-ee:oracle19.3.0-ee

      - name: Checkout source
        uses: actions/checkout@v2

      - name: Check Oracle Home
        run: |
          echo ----
          echo $ORACLE_HOME
          echo ****

#      - name: Check Oracle Listener Status
#        run: |
#          docker ps -a
#          docker logs oracle-server

      - name: Verify Oracle Instant Client installation
        run: |
          ls -la /opt/oracle/
          ls -la /opt/oracle/instantclient_21_1

      - name: PLSQL tests
        run: python -m unittest test/test_plsql.py

  plpgsql-test:
    runs-on: ubuntu-latest
    steps:
      - name: Set Environment Variables (TSQL)
        run: |
          echo "SQL_SERVER=localhost" >> $GITHUB_ENV
          echo "SQL_UID=postgres" >> $GITHUB_ENV
          echo "SQL_PWD=mysecretpassword" >> $GITHUB_ENV

      - name: Checkout source
        uses: actions/checkout@v2

      - name: Run postgres container
        run: |
          docker run --name pgtestdb -e POSTGRES_PASSWORD=mysecretpassword -p 5432:5432 -d postgres
          sleep 20

      - name: Setup py installation
        uses: actions/setup-python@v2
        with: 
          python-version: 3.x
      
      - name: Install dependancies
        run: |
          python -m pip install --upgrade pip
          pip install psycopg2-binary

      - name: PLpgSQL tests
        run: python -m unittest test/test_plpgsql.py

        
  mysql-test:
    runs-on: ubuntu-latest
    steps:
      - name: Set Environment Variables (TSQL)
        run: |
          echo "SQL_SERVER=localhost" >> $GITHUB_ENV
          echo "SQL_UID=root" >> $GITHUB_ENV
          echo "SQL_PWD=my-secret-pw" >> $GITHUB_ENV
          echo "SQL_DATABASE=my-secret-pw" >> $GITHUB_ENV

      - name: Checkout source
        uses: actions/checkout@v2

      - name: Run mysql container
        run: |
          docker pull mysql
          docker run --name mysql-testQL -e MYSQL_ROOT_PASSWORD=my-secret-pw -p 8080:8080 -d mysql:latest

      - name: Setup py installation
        uses: actions/setup-python@v2
        with: 
          python-version: 3.x
      
      - name: Install dependancies
        run: |
          python -m pip install --upgrade pip
          pip install mysql-connector-python

      - name: MySQL tests
        run: python -m unittest test/test_mysql.py


  make-pr:
    needs: [plsql-test, tsql-test, plpgsql-test, mysql-test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        if: github.actor == 'ThugPigeon653'

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: Auto PR
          title: Automated PR
          body: Created by a development branch
          branch: main
        if: github.actor == 'ThugPigeon653'
          
      - name: Merge Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: Merge PR
          title: Merge Pull Request
          body: This PR was automatically merged.
          branch: main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: github.actor == 'ThugPigeon653'

      - name: Delete Branch
        run: |
          git push --delete origin ${{ github.ref }}
        if: success() && github.actor == 'ThugPigeon653'